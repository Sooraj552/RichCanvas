<Window
    x:Class="RichCanvasDemo.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="clr-namespace:RichCanvasDemo.Helpers.Behaviors"
    xmlns:converters="clr-namespace:RichCanvasDemo.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:helpers="clr-namespace:RichCanvasDemo.Helpers"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:RichCanvasDemo"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:richCanvas="clr-namespace:RichCanvasToa;assembly=RichCanvasToa"
    xmlns:views="clr-namespace:RichCanvasDemo.CustomControls"
    xmlns:vm="clr-namespace:RichCanvasDemo.ViewModels"
    x:Name="window"
    Title="MainWindow"
    Width="800"
    Height="800"
    KeyboardNavigation.DirectionalNavigation="Once"
    WindowState="Maximized"
    mc:Ignorable="d">
    <Window.InputBindings>
        <KeyBinding Key="Esc" Command="{Binding CancelActionCommand}" />
    </Window.InputBindings>

    <Window.DataContext>
        <local:MainWindowViewModel />
    </Window.DataContext>

    <Window.Resources>
        <local:PointToStringConverter x:Key="PointToStringConverter" />
        <converters:StringToFloatConverter x:Key="StringToFloatConverter" />
        <converters:CommandToListConverter x:Key="CommandsToListConverter" />
        <GeometryDrawing
            x:Key="GridStyle"
            Brush="Green"
            Geometry="M0,0 L0,1 0.03,1 0.03,0.03 1,0.03 1,0 Z" />
        <converters:ListToPointCollectionConverter x:Key="ListToPointCollectionConverter" />
        <converters:ColorToSolidBrushColorConverter x:Key="ColorToSolidBrushColorConverter" />
        <Style BasedOn="{StaticResource MaterialDesignTextBlock}" TargetType="TextBlock" />
        <Style BasedOn="{StaticResource MaterialDesignRaisedButton}" TargetType="Button">
            <Setter Property="Margin" Value="0,0,0,4" />
            <Setter Property="FontSize" Value="12" />
        </Style>
        <Style BasedOn="{StaticResource MaterialDesignTextBoxBase}" TargetType="TextBox">
            <Setter Property="Margin" Value="0,2,0,8" />
        </Style>

    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="auto" />
        </Grid.ColumnDefinitions>

        <!--  INFORMATIONS PROPS API  -->
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
            </Grid.RowDefinitions>

            <StackPanel>
                <CheckBox
                    HorizontalAlignment="Left"
                    Content="Enable Grid"
                    IsChecked="{Binding EnableGrid, Mode=TwoWay}" />

                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Grid spacing value"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding GridSpacing, Mode=TwoWay}" />
            </StackPanel>
            <StackPanel>
                <CheckBox
                    HorizontalAlignment="Left"
                    Content="Enable Grid"
                    IsChecked="{Binding EnableGrid, Mode=TwoWay}" />

                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Grid spacing value"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding GridSpacing, Mode=TwoWay}" />
            </StackPanel>

            <StackPanel Grid.Row="1">
                <CheckBox
                    HorizontalAlignment="Left"
                    Content="Enable Snapping"
                    IsChecked="{Binding EnableSnapping, Mode=TwoWay}" />
            </StackPanel>

            <StackPanel Grid.Row="2">
                <CheckBox
                    HorizontalAlignment="Left"
                    Content="Disable Cache"
                    IsChecked="{Binding DisableCache, Mode=TwoWay}" />
            </StackPanel>

            <StackPanel Grid.Row="3">
                <CheckBox
                    HorizontalAlignment="Left"
                    Content="Disable Zoom"
                    IsChecked="{Binding DisableZoom, Mode=TwoWay}" />
            </StackPanel>

            <StackPanel Grid.Row="4">
                <CheckBox
                    HorizontalAlignment="Left"
                    Content="Disable Scroll"
                    IsChecked="{Binding DisableScroll, Mode=TwoWay}" />
            </StackPanel>

            <StackPanel Grid.Row="5">
                <CheckBox
                    HorizontalAlignment="Left"
                    Content="Disable AutoPanning"
                    IsChecked="{Binding DisableAutoPanning, Mode=TwoWay}" />

                <ComboBox
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Visibility"
                    md:HintAssist.IsFloating="True"
                    SelectedItem="{Binding VerticalScrollBarVisibility, Mode=TwoWay}">
                    <ScrollBarVisibility>Hidden</ScrollBarVisibility>
                    <ScrollBarVisibility>Visible</ScrollBarVisibility>
                    <ScrollBarVisibility>Disabled</ScrollBarVisibility>
                    <ScrollBarVisibility>Auto</ScrollBarVisibility>
                </ComboBox>

                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Auto-Pan speed"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding AutoPanSpeed, Mode=TwoWay}" />

                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Auto-Pan TickRate"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding AutoPanTickRate, Mode=TwoWay}" />
            </StackPanel>
            <StackPanel Grid.Row="6">
                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Scroll Factor"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding ScrollFactor, Mode=TwoWay}" />

                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Zoom Factor"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding ZoomFactor, Mode=TwoWay}" />

                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Max Scale"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding MaxScale, Mode=TwoWay}" />

                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Min Scale"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding MinScale, Mode=TwoWay}" />

                <TextBox
                    Width="100"
                    HorizontalAlignment="Left"
                    md:HintAssist.Hint="Scale"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding Scale, Mode=TwoWay}" />
            </StackPanel>

            <StackPanel Grid.Row="7">
                <TextBox
                    md:HintAssist.Hint="Number of elements"
                    md:HintAssist.IsFloating="True"
                    Text="{Binding ElementsCount, Mode=TwoWay}" />
                <Button
                    Width="100"
                    Height="30"
                    HorizontalAlignment="Left"
                    Command="{Binding GenerateElements}"
                    Content="Generate" />
            </StackPanel>
            <StackPanel Grid.Row="8">
                <ComboBox
                    md:HintAssist.Hint="View Preset"
                    md:HintAssist.IsFloating="True"
                    DisplayMemberPath="Name"
                    ItemsSource="{Binding ViewPresetItems}"
                    SelectedItem="{Binding SelectedViewPreset}" />
            </StackPanel>
            <!--<StackPanel Grid.Row="9">
                <TextBox Text="{Binding TranslateOffset, Mode=TwoWay}"
                         md:HintAssist.Hint="Translate Offset"
                         md:HintAssist.IsFloating="True" />
            </StackPanel>-->
        </Grid>

        <!--  ACTIONS  -->
        <Grid Grid.Row="1" Grid.Column="2">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Button
                    Width="120"
                    Height="30"
                    HorizontalAlignment="Right"
                    Command="{Binding DrawLineCommand}"
                    Content="Draw Line" />

                <Button
                    Grid.Row="1"
                    Width="120"
                    Height="30"
                    HorizontalAlignment="Right"
                    Command="{Binding DrawRectCommand}"
                    Content="Draw Rect" />

                <Button
                    Grid.Row="2"
                    Height="30"
                    MinWidth="120"
                    HorizontalAlignment="Right"
                    Command="{Binding ResizeCommand}"
                    Content="Resize" />

                <Button
                    Grid.Row="3"
                    Width="120"
                    Height="30"
                    HorizontalAlignment="Right"
                    Command="{Binding DrawBezierCommand}"
                    Content="Draw Bezier" />

                <Button
                    Grid.Row="4"
                    Width="120"
                    Height="30"
                    HorizontalAlignment="Right"
                    Command="{Binding DrawGroupCommand}"
                    Content="Draw Group" />

                <Button
                    Grid.Row="5"
                    Width="120"
                    Height="30"
                    HorizontalAlignment="Right"
                    Command="{Binding DeleteCommand}"
                    Content="Delete" />
                <StackPanel Grid.Row="6" Visibility="{Binding ShowProperties, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <views:PropertiesInfo DataContext="{Binding SelectedItem}" />
                </StackPanel>
            </Grid>
        </Grid>

        <!--  INFO FOOTER  -->
        <Grid Grid.Row="2" Grid.ColumnSpan="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>
            <StackPanel
                Grid.Column="1"
                Margin="2"
                Orientation="Horizontal">
                <TextBlock Text="Transform Offset: " />
                <TextBlock HorizontalAlignment="Left" Text="{Binding TranslateOffset, ElementName=source, Converter={StaticResource PointToStringConverter}}" />
            </StackPanel>
            <StackPanel
                Grid.Column="2"
                Margin="2"
                Orientation="Horizontal">
                <TextBlock Text="Mouse Location: " />
                <TextBlock HorizontalAlignment="Left" Text="{Binding MousePosition, ElementName=source, Converter={StaticResource PointToStringConverter}}" />
            </StackPanel>
            <StackPanel
                Grid.Column="3"
                Margin="2"
                Orientation="Horizontal">
                <TextBlock Text="Zoom: " />
                <TextBlock HorizontalAlignment="Left" Text="{Binding Scale, ElementName=source}" />
            </StackPanel>
            <StackPanel
                Grid.Column="4"
                Margin="2"
                Orientation="Horizontal">
                <TextBlock Text="Bounding Box: " />
                <TextBlock Text="{Binding ElementName=source, Path=ViewportRect.Location, StringFormat='\{0\} (left, top)'}" />
            </StackPanel>
            <StackPanel>
                <TextBlock HorizontalAlignment="Left" Text="{Binding SelectedItems.Count, StringFormat='\{0\} (selected items)'}" />
            </StackPanel>
        </Grid>

        <richCanvas:RichItemsControl
            Name="source"
            Grid.Row="1"
            Grid.Column="1"
            AutoPanSpeed="{Binding AutoPanSpeed, Converter={StaticResource StringToFloatConverter}}"
            AutoPanTickRate="{Binding AutoPanTickRate, Converter={StaticResource StringToFloatConverter}}"
            Background="AliceBlue"
            DisableAutoPanning="{Binding DisableAutoPanning}"
            DisableCache="{Binding DisableCache}"
            DisableScroll="{Binding DisableScroll}"
            DisableZoom="{Binding DisableZoom}"
            EnableGrid="{Binding EnableGrid}"
            EnableSnapping="{Binding EnableSnapping}"
            GridSpacing="{Binding GridSpacing, Converter={StaticResource StringToFloatConverter}}"
            GridStyle="{StaticResource GridStyle}"
            ItemsSource="{Binding Items}"
            MaxScale="{Binding MaxScale, Converter={StaticResource StringToFloatConverter}, ConverterParameter=double}"
            MinScale="{Binding MinScale, Converter={StaticResource StringToFloatConverter}, ConverterParameter=double}"
            MousePosition="{Binding MousePosition, Mode=OneWayToSource}"
            RealTimeDraggingEnabled="True"
            RealTimeSelectionEnabled="True"
            Scale="{Binding Scale, Converter={StaticResource StringToFloatConverter}, Mode=TwoWay}"
            ScaleFactor="{Binding ZoomFactor, Converter={StaticResource StringToFloatConverter}, ConverterParameter=double}"
            ScrollFactor="{Binding ScrollFactor, Converter={StaticResource StringToFloatConverter}, ConverterParameter=double}"
            Scrolling="OnScrolling"
            SelectedItem="{Binding SelectedItem, Mode=TwoWay}"
            SelectedItems="{Binding SelectedItems}"
            TranslateOffset="{Binding TranslateOffset, Mode=TwoWay}"
            VerticalScrollBarVisibility="{Binding VerticalScrollBarVisibility}">

            <richCanvas:RichItemsControl.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{Binding AddImageCommand}" Header="Add Image" />
                    <MenuItem Command="{Binding AddTextCommand}" Header="Add Text" />
                    <MenuItem Command="{Binding PasteCommand}" Header="Paste" />
                    <MenuItem Command="{Binding AddViewPresetCommand}" Header="Add View Preset" />
                </ContextMenu>
            </richCanvas:RichItemsControl.ContextMenu>

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="DrawingEnded">
                    <i:InvokeCommandAction Command="{Binding DrawEndedCommand}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <richCanvas:RichItemsControl.Resources>
                <DataTemplate x:Key="SelectedAdornerTemplate">
                    <Border
                        Background="DodgerBlue"
                        BorderBrush="DodgerBlue"
                        BorderThickness="1">
                        <TextBlock
                            MaxWidth="60"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Foreground="White">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}{0} x {1}">
                                    <Binding Path="Width" />
                                    <Binding Path="Height" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </Border>
                </DataTemplate>

                <DataTemplate x:Key="HoverAdornerTemplate">
                    <Border BorderBrush="DodgerBlue" BorderThickness="3" />
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:Bezier}">
                    <views:BezierLine DataContext="{Binding}" />
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:Rectangle}">
                    <Rectangle
                        Fill="{Binding VisualProperties.FillColor, Converter={StaticResource ColorToSolidBrushColorConverter}}"
                        Stroke="{Binding VisualProperties.BorderColor, Converter={StaticResource ColorToSolidBrushColorConverter}}"
                        StrokeThickness="3">
                        <Rectangle.Style>
                            <Style>
                                <Setter Property="richCanvas:RichItemContainer.ApplyTransform">
                                    <Setter.Value>
                                        <TransformGroup>
                                            <RotateTransform Angle="{Binding Angle}" />
                                            <ScaleTransform />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Rectangle.Style>
                    </Rectangle>
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:Line}">
                    <Line
                        helpers:AttachedAdorner.HasLineHoverAdorner="True"
                        Stroke="{Binding VisualProperties.BorderColor, Converter={StaticResource ColorToSolidBrushColorConverter}}"
                        StrokeThickness="3"
                        X2="{Binding Width}"
                        Y2="{Binding Height}" />
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:ImageVisual}">
                    <Image Source="{Binding ImageSource}" Stretch="Fill" />
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:TextVisual}">
                    <TextBlock
                        VerticalAlignment="Center"
                        Text="{Binding Text}"
                        TextAlignment="Center" />
                </DataTemplate>

                <DataTemplate DataType="{x:Type vm:Group}">
                    <Rectangle
                        Fill="Transparent"
                        IsHitTestVisible="{Binding IsSelectable}"
                        Stroke="Black"
                        StrokeDashArray="2"
                        StrokeThickness="2">
                        <i:Interaction.Behaviors>
                            <behaviors:GroupBehavior />
                        </i:Interaction.Behaviors>
                    </Rectangle>
                </DataTemplate>

            </richCanvas:RichItemsControl.Resources>

            <richCanvas:RichItemsControl.ItemContainerStyle>

                <Style TargetType="richCanvas:RichItemContainer">

                    <Setter Property="helpers:EventToCommand.Event" Value="LeftChanged, TopChanged" />
                    <Setter Property="helpers:EventToCommand.Command">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource CommandsToListConverter}">
                                <Binding Path="LeftChangedCommand" />
                                <Binding Path="TopChangedCommand" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>

                    <Setter Property="helpers:EventToCommand.CanExecute" Value="{Binding IsSelected}" />

                    <Setter Property="Tag" Value="{Binding DataContext, ElementName=window}" />

                    <Setter Property="helpers:AttachedAdorner.HasHoverAdorner" Value="{Binding IsSelectable}" />

                    <Setter Property="helpers:AttachedAdorner.ShowResizeAdorner" Value="{Binding IsSelected}" />

                    <Setter Property="Top" Value="{Binding Top, Mode=TwoWay}" />

                    <Setter Property="Left" Value="{Binding Left, Mode=TwoWay}" />

                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />

                    <Setter Property="Width" Value="{Binding Width, Mode=TwoWay}" />

                    <Setter Property="Height" Value="{Binding Height, Mode=TwoWay}" />

                    <Setter Property="IsSelectable" Value="{Binding IsSelectable}" />

                    <Setter Property="IsDraggable" Value="{Binding IsDraggable}" />

                    <Setter Property="HasCustomBehavior" Value="{Binding HasCustomBehavior}" />

                    <Setter Property="ShouldBringIntoView" Value="{Binding ShouldBringIntoView, Mode=TwoWay}" />

                    <Setter Property="Scale" Value="{Binding Scale, Mode=TwoWay}" />

                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                                <MenuItem Command="{Binding CopyCommand}" Header="Copy" />
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>

                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                    </Style.Triggers>

                </Style>
            </richCanvas:RichItemsControl.ItemContainerStyle>

        </richCanvas:RichItemsControl>

    </Grid>

</Window>
